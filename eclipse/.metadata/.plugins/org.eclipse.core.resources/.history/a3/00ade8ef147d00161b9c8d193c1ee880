import java.util.Stack;


public class SingleListFunctions {

	static SingleLinkedList head;

	int size ;
	public SingleListFunctions(){
		head = null;
		size = 0;
	}
	
	void addRear(int value){
		
		if(head == null){
			head = new SingleLinkedList(value);
		}
		else{
		SingleLinkedList current = head;
		while(current.next != null){
			current = current.next;
		}
		SingleLinkedList newlink = new SingleLinkedList(value, null);
		current.next = newlink;
		}
	}
		
	public void Print(){
		SingleLinkedList current = head;
		while(current != null){
			System.out.println(current.Data());
			current = current.next;
		}
	}
	
	boolean isPalidrome(SingleLinkedList head){
		
		SingleLinkedList fast = head;
		SingleLinkedList slow = head;
		Stack<Integer> stack = new Stack<Integer>();
		
		while (fast != null && fast.next != null){
			stack.push(slow.data);
			slow = slow.next;
			fast = fast.next.next;
		}
		if(fast != null){
			slow = slow.next;
		}
		while ( slow != null){
			int top = stack.pop();
			
			if(top != slow.data){
				return false;
			}
			slow = slow.next;
		}
		
		return true;
	}
	
	public static void main (String args[]){
		
		SingleListFunctions sf = new SingleListFunctions();
		sf.addRear(1);
		sf.addRear(2);
		sf.addRear(2);
		sf.addRear(1);
		sf.Print();
		
		System.out.print(sf.isPalidrome(head));
		
	}
	
}
